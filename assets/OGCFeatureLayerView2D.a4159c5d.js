import{ab as e,ac as i,ad as r,w as a}from"./vendor.d0a39f0f.js";import{Y as s}from"./FeatureLayerView2D.fdf5a947.js";import"./Container.90659a9c.js";import"./clickToleranceUtils.85f9bed9.js";import"./definitions.e5e12ce7.js";import"./LayerView.556d10e0.js";import"./schemaUtils.c72e3829.js";import"./Utils.ea926aef.js";import"./Texture.6f578e52.js";import"./MaterialKey.376930c0.js";import"./visualVariablesUtils.076fa3c6.js";import"./CIMSymbolHelper.0ef4e080.js";import"./Rect.db562a93.js";import"./BidiEngine.af5bfcbd.js";import"./MD5.86afbcc5.js";import"./popupUtils.2333904f.js";import"./floorFilterUtils.798a8eb5.js";import"./RefreshableLayerView.6e21e268.js";import"./drapedUtils.9a5fbe8c.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:i}=this;e.source.supportsSpatialReference(i.spatialReference)||this.addResolvingPromise(Promise.reject(new a("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([i()],t.prototype,"layer",void 0),e([i({readOnly:!0})],t.prototype,"availableFields",null),t=e([r("esri.views.layers.OGCFeatureLayerView")],t),t};let l=class extends(t(s)){};l=e([r("esri.views.2d.layers.OGCFeatureLayerView2D")],l);var o=l;export{o as default};
