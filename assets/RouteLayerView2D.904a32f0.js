import{cP as a,di as p,r as n,B as g,cV as m,cA as l,af as v,ah as V}from"./vendor.85f7dae5.js";import{f as I,u as A}from"./LayerView.96933026.js";import{i as H}from"./GraphicContainer.14e23810.js";import{r as b}from"./BaseGraphicContainer.b5f81ed2.js";import"./Container.710b0eab.js";import"./Utils.c81af201.js";import"./enums.d6db9796.js";import"./enums.457e23f9.js";import"./Texture.0a5e9578.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.1288b346.js";import"./BidiEngine.b9926823.js";import"./MaterialKey.d6d4c400.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.d4bcbcd3.js";import"./json.da51edc4.js";import"./VertexArrayObject.37b5010e.js";import"./FeatureContainer.e9c6d16b.js";import"./TileContainer.3466b105.js";import"./WGLContainer.58232395.js";import"./pixelUtils.81a2c47a.js";import"./ProgramTemplate.222695da.js";import"./StyleDefinition.3146490e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.6c4193ad.js";import"./visualVariablesUtils.36e1778e.js";import"./Matcher.4fc35cf2.js";import"./tileUtils.847f5850.js";import"./TileClipper.9eab18a5.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.5149f774.js";import"./quantizationUtils.bb304765.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.a6cfb8c2.js";import"./createSymbolSchema.86478aa4.js";import"./MD5.67d7a872.js";import"./util.94a60279.js";import"./ComputedAttributeStorage.fdd6354d.js";import"./vec3f32.8179e08f.js";const c=["routeInfo","directionLines","directionPoints","polygonBarriers","polylineBarriers","pointBarriers","stops"],C=Object.freeze({remove(){},pause(){},resume(){}});let r=class extends I(A){constructor(){super(...arguments),this._graphicsViews=new Map,this._highlightIds=new Map}attach(){for(const i of c)this.handles.add(a(()=>n(this.layer[i])?i==="routeInfo"?[g(this.layer[i])]:g(this.layer[i]).toArray():null,t=>this._createGraphicsView(i,t),p),i)}detach(){this._destroyGraphicsViews()}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof m?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):l.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray()),t=t.filter(s=>s!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):C}async hitTest(i,t){if(this.suspended||!this._graphicsViews.size)return Promise.resolve(null);const s=Array.from(this._graphicsViews.values()).reverse().map(e=>e.hitTest(i)).flat().filter(e=>!!e);for(const e of s)e.layer=this.layer,e.sourceLayer=this.layer;return s}moveStart(){}moveEnd(){}update(i){for(const t of this._graphicsViews.values())t.processUpdate(i)}viewChange(){for(const i of this._graphicsViews.values())i.viewChange()}isUpdating(){for(const i of this._graphicsViews.values())if(i.updating)return!0;return!1}_createGraphicsView(i,t){this._destroyGraphicsView(i);const s=this.view,e=()=>this.requestUpdate(),d=new l(n(t)?t.map(u=>{const{attributes:f,geometry:_,symbol:y,popupInfo:w}=u.toPortalJSON();return m.fromJSON({attributes:f,geometry:_,symbol:y,popupTemplate:w})}):[]),o=new H(s.featuresTilingScheme),h=new b({container:o,graphics:d,requestUpdateCallback:e,view:s});this._graphicsViews.set(i,h),this.container.addChildAt(o,c.indexOf(i)),this._updateHighlight(),this.handles.add([a(()=>h.updating,()=>this.notifyChange("updating"),p)],`updating-${i}`)}_destroyGraphicsView(i){if(!this._graphicsViews.has(i))return;const t=this._graphicsViews.get(i);this.container.removeChild(t.container),t.destroy(),this.handles.remove(`updating-${i}`),this._graphicsViews.delete(i)}_destroyGraphicsViews(){this.container.removeAllChildren();for(const[i,t]of this._graphicsViews.entries())this.handles.remove(i),t.destroy();this._graphicsViews.clear()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t);this._highlightIds.set(t,s+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t)-1;s===0?this._highlightIds.delete(t):this._highlightIds.set(t,s)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this._graphicsViews.values())t.setHighlight(i)}};r=v([V("esri.views.2d.layers.RouteLayerView2D")],r);const di=r;export{di as default};
