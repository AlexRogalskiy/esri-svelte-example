import{ab as e,ac as i,ad as a,q as r}from"./vendor.5b1a85aa.js";import{Z as s}from"./FeatureLayerView2D.7cfd9976.js";import"./clickToleranceUtils.bcc7d4ae.js";import"./definitions.8ca8ae21.js";import"./LayerView.acde8531.js";import"./Container.37ffa055.js";import"./mat4f32.9c1247c6.js";import"./schemaUtils.de299d45.js";import"./Utils.e2f03d29.js";import"./Texture.71cf8656.js";import"./MaterialKey.bc1d39e4.js";import"./visualVariablesUtils.73438ca6.js";import"./CIMSymbolHelper.2d637d7d.js";import"./Rect.96506681.js";import"./BidiEngine.82513d9e.js";import"./MD5.a7f2b001.js";import"./popupUtils.b735cda3.js";import"./drapedUtils.4f6618b1.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:i}=this;e.source.supportsSpatialReference(i.spatialReference)||this.addResolvingPromise(Promise.reject(new r("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([i()],t.prototype,"layer",void 0),e([i({readOnly:!0})],t.prototype,"availableFields",null),t=e([a("esri.views.layers.OGCFeatureLayerView")],t),t};let l=class extends(t(s)){};l=e([a("esri.views.2d.layers.OGCFeatureLayerView2D")],l);var o=l;export{o as default};
