var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,o=(t,r,a)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[r]=a,n=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&o(e,r,t[r]);if(a)for(var r of a(t))s.call(t,r)&&o(e,r,t[r]);return e};import{ab as p,ad as l,ac as m,g0 as h,w as c,r as d,cw as u,dy as f,m as g,gh as y,G as b}from"./vendor.d0a39f0f.js";import{t as j}from"./BitmapContainer.98f407c0.js";import{l as v,u as w}from"./LayerView.556d10e0.js";import{a as x,e as C}from"./BaseGraphicContainer.ce1e336b.js";import{I as U}from"./Utils.ea926aef.js";import{S as I}from"./ExportStrategy.da9ec209.js";import{c as P}from"./ExportImageParameters.bea8087f.js";import{s as S}from"./clickToleranceUtils.85f9bed9.js";import{t as V,d as E}from"./popupUtils.2333904f.js";import{a as G}from"./RefreshableLayerView.6e21e268.js";import{a as M}from"./drapedUtils.9a5fbe8c.js";import"./WGLContainer.e726cb8a.js";import"./definitions.e5e12ce7.js";import"./VertexArrayObject.3a9852d6.js";import"./Texture.6f578e52.js";import"./ShaderCompiler.f5adc423.js";import"./config.92a85a9b.js";import"./GeometryUtils.1bcb906c.js";import"./MaterialKey.376930c0.js";import"./pixelUtils.df2312f8.js";import"./Container.90659a9c.js";import"./earcut.9760c2d2.js";import"./quantizationUtils.2d4b616a.js";import"./json.62026198.js";import"./Matcher.475ab8e3.js";import"./ComputedAttributeStorage.61e51d59.js";import"./FeatureSetReader.3c31cb94.js";import"./centroid.1404a86d.js";import"./visualVariablesUtils.684ffd7c.js";import"./visualVariablesUtils.076fa3c6.js";import"./tileUtils.de6627be.js";import"./TileClipper.863da83f.js";import"./schemaUtils.c72e3829.js";import"./CIMSymbolHelper.0ef4e080.js";import"./Rect.db562a93.js";import"./BidiEngine.af5bfcbd.js";import"./MD5.86afbcc5.js";import"./FeatureContainer.da02904a.js";import"./TileContainer.850b0054.js";import"./Bitmap.97c680ca.js";import"./sublayerUtils.ec374b58.js";import"./floorFilterUtils.798a8eb5.js";let O=class extends x{renderChildren(e){if(e.drawPhase!==U.HIGHLIGHT)return;if(this.attributeView.bindTextures(e.context),!this.children.some((e=>e.hasData)))return;super.renderChildren(e);const{painter:t}=e,r=t.effects.highlight;r.bind(e),e.context.setColorMask(!0,!0,!0,!0),e.context.clear(16384),this._renderChildren(e,r.defines.concat(["highlightAll"])),r.draw(e),r.unbind()}};O=p([l("esri.views.2d.layers.support.HighlightGraphicContainer")],O);var q=O;const _=e=>{let a=class extends e{initialize(){this.exportImageParameters=new P({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var e;return null==(e=this.exportImageParameters)||e.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(e,a){const{layer:i}=this;if(!e)return Promise.reject(new c("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:i}));const s=this.get("view.scale"),o=[],p=async e=>{const i=0===e.minScale||s<=e.minScale,l=0===e.maxScale||s>=e.maxScale;if(e.visible&&i&&l)if(e.sublayers)e.sublayers.forEach(p);else if(e.popupEnabled){const i=E(e,((e,a)=>t(e,r(a)))(n({},a),{defaultPopupTemplateEnabled:!1}));d(i)&&o.unshift({sublayer:e,popupTemplate:i})}},l=i.sublayers.toArray().reverse().map(p);await Promise.all(l);const m=o.map((async({sublayer:t,popupTemplate:r})=>{await t.load().catch((()=>{}));const i=t.createQuery(),s=d(a)?a.event:null,o=S({renderer:t.renderer,event:s}),n=this.createFetchPopupFeaturesQueryGeometry(e,o);i.geometry=n,i.outFields=await V(t,r);const p=await this._loadArcadeModules(r);return p&&p.arcadeUtils.hasGeometryOperations(r)||(i.maxAllowableOffset=n.width/o),(await t.queryFeatures(i)).features}));return(await u(m)).reduce(((e,t)=>t.value?[...e,...t.value]:e),[]).filter((e=>null!=e))}canResume(){var e;return!(!super.canResume()||null!=(e=this.timeExtent)&&e.isEmpty)}_loadArcadeModules(e){if(e.get("expressionInfos.length"))return f()}};return p([m()],a.prototype,"exportImageParameters",void 0),p([m({readOnly:!0})],a.prototype,"exportImageVersion",null),p([m()],a.prototype,"layer",void 0),p([m()],a.prototype,"suspended",void 0),p([m(h)],a.prototype,"timeExtent",void 0),a=p([l("esri.views.layers.MapImageLayerView")],a),a},F=g.getLogger("esri.views.2d.layers.MapImageLayerView2D");let T=class extends(_(G(v(w)))){constructor(){super(...arguments),this._highlightGraphics=new y}hitTest(){return null}update(e){this.strategy.update(e).catch((e=>{b(e)||F.error(e)}))}attach(){const{imageMaxWidth:e,imageMaxHeight:t,version:r}=this.layer,a=r>=10.3,i=r>=10;this._bitmapContainer=new j,this.container.addChild(this._bitmapContainer);const s=new C({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new q(this.view.featuresTilingScheme)});this.container.addChild(s.container),this.strategy=new I({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:e,imageMaxHeight:t,imageRotationSupported:a,imageNormalizationSupported:i,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",(()=>this.requestUpdate())),"exportImageVersion"),this.handles.add(this.watch("view.floors",(()=>this.requestUpdate())),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(e,t){return this._highlightGraphics.add(e),{remove:()=>{this._highlightGraphics.remove(e)}}}createFetchPopupFeaturesQueryGeometry(e,t){return M(e,t,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,a){return this.layer.fetchImage(e,t,r,n({timeExtent:this.timeExtent,floors:this.view.floors},a))}};p([m()],T.prototype,"strategy",void 0),p([m()],T.prototype,"updating",void 0),T=p([l("esri.views.2d.layers.MapImageLayerView2D")],T);var A=T;export{A as default};
