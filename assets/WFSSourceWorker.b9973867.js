import{H as p,bv as m,dA as o,r as d,bC as g,bX as _,c2 as f,bD as w,w as u,av as E,E as j,m as F}from"./vendor.f5642644.js";import{m as q}from"./FeatureStore.96d6ab95.js";import{g as b,f as S}from"./projectionSupport.0d3c0291.js";import{L as x}from"./QueryEngine.7c83d469.js";import{O as T,L as C}from"./geojson.3a00034d.js";import{d as I}from"./sourceUtils.a36d9fee.js";import{K as P}from"./wfsUtils.94d54736.js";import"./PooledRBush.de4e0a63.js";import"./centroid.b7b6726a.js";import"./json.2d0d6862.js";import"./WhereClause.289bbe04.js";import"./QueryEngineCapabilities.83e56447.js";import"./quantizationUtils.0f09cc76.js";import"./utils.57c71bba.js";import"./ClassBreaksDefinition.be3e9d76.js";import"./spatialQuerySupport.ba83e81c.js";import"./xmlUtils.9790bce4.js";class N{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,r=await P(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(s=>s.name),signal:e});await T(r),p(e);const a=C(r,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!m(this._queryEngine.spatialReference,o))for(const s of a)d(s.geometry)&&(s.geometry=g(b(_(s.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const s of a){const i={};I(this._fieldsIndex,i,s.attributes,!0),s.attributes=i,s.attributes[t]==null&&(s.objectId=s.attributes[t]=n++)}return a}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:n,fields:s,geometryType:i,featureType:h,objectIdField:y,customParameters:l}=e;this._featureType=h,this._customParameters=l,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new f(s),await this._checkProjection(n),p(t),this._queryEngine=new x({fields:s,geometryType:i,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new q({geometryType:i,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(w(t.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=E(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),r&&this._queryEngine.featureStore.addMany(r)},r=>{this._queryEngine.featureStore.clear(),j(r)||F.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:r}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await S(o,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{N as default};
