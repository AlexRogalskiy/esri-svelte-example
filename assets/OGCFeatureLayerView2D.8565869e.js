import{a9 as s,aa as a,ab as r,w as p}from"./vendor.f5642644.js";import m from"./FeatureLayerView2D.8496f51a.js";import"./Container.46e88f89.js";import"./drapedUtils.31b2576a.js";import"./definitions.21e97413.js";import"./LayerView.6e406b70.js";import"./schemaUtils.24d1146f.js";import"./Utils.cc4850d4.js";import"./Texture.36d56722.js";import"./MaterialKey.4d0549e4.js";import"./visualVariablesUtils.7662df5b.js";import"./CIMSymbolHelper.e6d71723.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.a172be06.js";import"./quantizationUtils.0f09cc76.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./util.a76d11a6.js";import"./popupUtils.25af489d.js";import"./RefreshableLayerView.0b1a5166.js";const n=o=>{let e=class extends o{initialize(){const{layer:i,view:l}=this;i.source.supportsSpatialReference(l.spatialReference)||this.addResolvingPromise(Promise.reject(new p("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:i})))}get availableFields(){return this.layer.fieldsIndex.fields.map(i=>i.name)}};return s([a()],e.prototype,"layer",void 0),s([a({readOnly:!0})],e.prototype,"availableFields",null),e=s([r("esri.views.layers.OGCFeatureLayerView")],e),e};let t=class extends n(m){};t=s([r("esri.views.2d.layers.OGCFeatureLayerView2D")],t);const M=t;export{M as default};
