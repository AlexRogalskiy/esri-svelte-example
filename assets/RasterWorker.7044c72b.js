var S=Object.defineProperty,h=Object.defineProperties;var O=Object.getOwnPropertyDescriptors;var f=Object.getOwnPropertySymbols;var x=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var d=(r,e,t)=>e in r?S(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,u=(r,e)=>{for(var t in e||(e={}))x.call(e,t)&&d(r,t,e[t]);if(f)for(var t of f(e))y.call(e,t)&&d(r,t,e[t]);return r},p=(r,e)=>h(r,O(e));import{r as l,cL as c,B as N,gN as v}from"./vendor.85f7dae5.js";import{u as a,s as J,v as b,y as g,O as z,b as B}from"./pixelUtils.81a2c47a.js";import{S as P,T as w}from"./RasterSymbolizer.dac26e99.js";import{y as D,G as k,D as T}from"./rasterProjectionHelper.9aa0b30d.js";import{d as G,m as E,h as j}from"./dataUtils.913cc7bb.js";import{f as L}from"./utils.1abe6448.js";import"./colorUtils.4a110f06.js";class C{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=G(t,e.type);return Promise.resolve(l(s)&&s.toJSON())}async decode(e){const t=await P(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?c.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(l(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=w.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(l(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=J(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=b(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){var t;const s=e.srcPixelBlocks.map(m=>m?new a(m):null),o=g(s,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,n=o;return e.coefs&&(n=z(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=B(e.destDimension,e.gcsGrid),n=N(E(n,e.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:(t=n)==null?void 0:t.toJSON(),localNorthDirections:i}}async createStreamlinesMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:i}=await j(e.rendererSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:i.buffer},transferList:[o.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=c.fromJSON(e.projectedExtent),s=c.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new v({steps:e.datumTransformationSteps})),(e.includeGCSGrid||D(t.spatialReference,s.spatialReference,o))&&await k();const i=e.rasterTransform?L(e.rasterTransform):null;return T(p(u({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:i}))}}export{C as default};
