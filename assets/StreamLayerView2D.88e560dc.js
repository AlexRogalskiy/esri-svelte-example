var b=Object.defineProperty,j=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var O=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var c=(e,t,r)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))O.call(t,r)&&c(e,r,t[r]);if(l)for(var r of l(t))S.call(t,r)&&c(e,r,t[r]);return e},p=(e,t)=>j(e,g(t));import{a9 as n,aa as o,ab as R,w as m,cJ as _,q as y,r as u}from"./vendor.f5642644.js";import x from"./FeatureLayerView2D.8496f51a.js";import{e as I}from"./util.a76d11a6.js";import"./Container.46e88f89.js";import"./drapedUtils.31b2576a.js";import"./definitions.21e97413.js";import"./LayerView.6e406b70.js";import"./schemaUtils.24d1146f.js";import"./Utils.cc4850d4.js";import"./Texture.36d56722.js";import"./MaterialKey.4d0549e4.js";import"./visualVariablesUtils.7662df5b.js";import"./CIMSymbolHelper.e6d71723.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./cimSymbolUtils.a172be06.js";import"./quantizationUtils.0f09cc76.js";import"./devEnvironmentUtils.444b8fd1.js";import"./MD5.f9440c6b.js";import"./popupUtils.25af489d.js";import"./RefreshableLayerView.0b1a5166.js";function h(e,t){if(y(e)&&y(t))return null;const r={};return u(t)&&(r.geometry=t.toJSON()),u(e)&&(r.where=e),r}let s=class extends x{constructor(){super(...arguments),this._enabledDataReceived=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.handles.add([this.layer.watch("purgeOptions",()=>this._update())])}destroy(){this.connectionStatus="disconnected"}get connectionError(){if(this.errorString)return new m("stream-controller",this.errorString)}on(e,t){e==="data-received"&&(this._enabledDataReceived=!0,this._proxy.enableEvent("data-received",!0));const r=super.on(e,t),i=this;return{remove(){r.remove(),e==="data-received"&&(i._proxy.closed||i.hasEventListener("data-received")||i._proxy.enableEvent("data-received",!1))}}}queryLatestObservations(e,t){if(!(this.layer.timeInfo.endField||this.layer.timeInfo.startField))throw new m("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then(r=>{const i=_.fromJSON(r);return i.features.forEach(a=>{a.layer=this.layer,a.sourceLayer=this.layer}),i})}_createClientOptions(){return p(d({},super._createClientOptions()),{setProperty:e=>{this.set(e.propertyName,e.value)}})}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(h(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map(v=>v.toJSON()),i=I(e.geometryType),a=e.timeInfo&&e.timeInfo.toJSON()||null,f=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:i,objectIdField:t,timeInfo:a,source:this.layer.parsedUrl,serviceFilter:h(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enableDataReceived:this._enabledDataReceived,spatialReference:f,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};n([o()],s.prototype,"errorString",void 0),n([o({readOnly:!0})],s.prototype,"connectionError",null),n([o()],s.prototype,"connectionStatus",void 0),s=n([R("esri.views.2d.layers.StreamLayerView2D")],s);const Q=s;export{Q as default};
