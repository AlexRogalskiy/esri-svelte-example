import{I as e,bs as t,dB as s,r,bH as a,c6 as i,cd as n,bI as o,w as u,ay as h,G as p,m as y}from"./vendor.d0a39f0f.js";import{m as l}from"./FeatureStore.2b302d70.js";import{g as c,f as m}from"./quantizationUtils.2d4b616a.js";import{H as d}from"./QueryEngine.c9f49fa3.js";import{I as g,k as _}from"./geojson.aa9ea6ad.js";import{d as f}from"./sourceUtils.f4154c33.js";import{B as w}from"./wfsUtils.2043d06c.js";import"./PooledRBush.4b631a20.js";import"./centroid.1404a86d.js";import"./json.62026198.js";import"./WhereClause.1eaac7f4.js";import"./QueryEngineCapabilities.47963c2d.js";import"./utils.f10afb6d.js";import"./spatialQuerySupport.2755696c.js";import"./xmlUtils.ae0e30b2.js";class E{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async n=>{const{objectIdField:o}=this._queryEngine,u=await w(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map((e=>e.name)),signal:n});await g(u),e(n);const h=_(u,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:o});if(!t(this._queryEngine.spatialReference,s))for(const e of h)r(e.geometry)&&(e.geometry=a(c(i(e.geometry,this._queryEngine.geometryType,!1,!1),s,this._queryEngine.spatialReference)));let p=1;for(const e of h){const t={};f(this._fieldsIndex,t,e.attributes,null,!0),e.attributes=t,null==e.attributes[o]&&(e.objectId=e.attributes[o]=p++)}return h}}destroy(){var e;null==(e=this._queryEngine)||e.destroy(),this._queryEngine=null}async load(t,s){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:i,fields:u,geometryType:h,featureType:p,objectIdField:y,customParameters:c}=t;this._featureType=p,this._customParameters=c,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new n(u),await this._checkProjection(i),e(s),this._queryEngine=new d({fields:u,geometryType:h,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:i,timeInfo:null,featureStore:new l({geometryType:h,hasM:!1,hasZ:!1})});const m=await this._snapshotFeatures(o(s.signal));return this._queryEngine.featureStore.addMany(m),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}setCustomParameters(e){this._customParameters=e}async refresh(){var e;return null==(e=this._snapshotTask)||e.abort(),this._snapshotTask=h(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)}),(e=>{this._queryEngine.featureStore.clear(),p(e)||y.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))})),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await m(s,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{E as default};
