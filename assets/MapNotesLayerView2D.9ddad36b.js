import{r as o,cV as m,cA as u,a0 as p,d1 as f,w,af as _,ah as y}from"./vendor.85f7dae5.js";import{f as V,u as v}from"./LayerView.96933026.js";import{i as c}from"./GraphicContainer.14e23810.js";import{r as g}from"./BaseGraphicContainer.b5f81ed2.js";import"./Container.710b0eab.js";import"./Utils.c81af201.js";import"./enums.d6db9796.js";import"./enums.457e23f9.js";import"./Texture.0a5e9578.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.1288b346.js";import"./BidiEngine.b9926823.js";import"./MaterialKey.d6d4c400.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.d4bcbcd3.js";import"./json.da51edc4.js";import"./VertexArrayObject.37b5010e.js";import"./FeatureContainer.e9c6d16b.js";import"./TileContainer.3466b105.js";import"./WGLContainer.58232395.js";import"./pixelUtils.81a2c47a.js";import"./ProgramTemplate.222695da.js";import"./StyleDefinition.3146490e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.6c4193ad.js";import"./visualVariablesUtils.36e1778e.js";import"./Matcher.4fc35cf2.js";import"./tileUtils.847f5850.js";import"./TileClipper.9eab18a5.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.5149f774.js";import"./quantizationUtils.bb304765.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.a6cfb8c2.js";import"./createSymbolSchema.86478aa4.js";import"./MD5.67d7a872.js";import"./util.94a60279.js";import"./ComputedAttributeStorage.fdd6354d.js";import"./vec3f32.8179e08f.js";const d="sublayers",n="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends V(v){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){const e=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const s=this._graphicsViewsFeatureCollectionMap.get(r);for(const h of a)!h.popupTemplate&&s.popupTemplate&&(h.popupTemplate=s.popupTemplate)}return a});return(await Promise.all(e)).flat()}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof m?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):u.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):C}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of e){const a=new c(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new g({view:i,graphics:r.source,renderer:r.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([p(r,"visible",h=>s.container.visible=h),p(s,"updating",()=>this.notifyChange("updating"))],n)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(f(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),w(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new c(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new g({view:t,graphics:r.graphics,requestUpdateCallback:e,container:a});this.handles.add([r.on("graphic-update",s.graphicUpdateHandler),p(r,"visible",h=>s.container.visible=h),p(s,"updating",()=>this.notifyChange("updating"))],n),this.container.addChild(s.container),i.push(s)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=_([y("esri.views.2d.layers.MapNotesLayerView2D")],l);const li=l;export{li as default};
