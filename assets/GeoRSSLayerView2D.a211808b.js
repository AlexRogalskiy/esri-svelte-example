import{W as a,cJ as y,cw as d,gq as f,gr as g,bS as l,a9 as j,ab as b}from"./vendor.f5642644.js";import{l as w,u}from"./LayerView.6e406b70.js";import{i as S}from"./GraphicContainer.fc280989.js";import{i as V}from"./BaseGraphicContainer.d8501c0a.js";import"./Container.46e88f89.js";import"./Utils.cc4850d4.js";import"./Texture.36d56722.js";import"./CIMSymbolHelper.e6d71723.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.0d3c0291.js";import"./json.2d0d6862.js";import"./VertexArrayObject.e0a1a120.js";import"./FeatureContainer.ea98f157.js";import"./TileContainer.03ef91ca.js";import"./WGLContainer.96b23cd9.js";import"./ShaderCompiler.42257610.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.4d0549e4.js";import"./pixelUtils.62a09b6b.js";import"./earcut.f20dd8d8.js";import"./visualVariablesUtils.fd6dc537.js";import"./visualVariablesUtils.7662df5b.js";import"./Matcher.19eb3b6e.js";import"./tileUtils.c954798b.js";import"./TileClipper.9ec40b87.js";import"./cimSymbolUtils.a172be06.js";import"./quantizationUtils.0f09cc76.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.24d1146f.js";import"./MD5.f9440c6b.js";import"./util.a76d11a6.js";import"./ComputedAttributeStorage.cf3eba07.js";import"./FeatureSetReader.8549f04d.js";import"./centroid.b7b6726a.js";import"./vec3f32.9cc42d31.js";let n=class extends w(u){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,s){if(!this.graphicsViews.length)return null;const p=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(p)).flat().filter((i,t)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[t]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const s of this.graphicsViews)s.processUpdate(e)}attach(){this.handles.add([a(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:s,featureSet:p,layerDefinition:i}of e){const t=y.fromJSON(p),m=new d(t.features),h=i.drawingInfo,c=s?f.fromJSON(s):null,r=g(h.renderer),o=new V({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:m,renderer:r,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[t.geometryType]=o,this._popupTemplates.set(o,c),t.geometryType!=="polygon"||this.layer.polygonSymbol?t.geometryType!=="polyline"||this.layer.lineSymbol?t.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=r.symbol):this.layer.lineSymbol=r.symbol:this.layer.polygonSymbol=r.symbol,this.graphicsViews.push(o),this.container.addChild(o.container)}}),a(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new l({symbol:e})}),a(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new l({symbol:e})}),a(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new l({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};n=j([b("esri.views.2d.layers.GeoRSSLayerView2D")],n);const pe=n;export{pe as default};
