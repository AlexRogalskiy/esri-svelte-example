var M=Object.defineProperty,A=Object.defineProperties;var q=Object.getOwnPropertyDescriptors;var I=Object.getOwnPropertySymbols;var _=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var S=(i,e,t)=>e in i?M(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,u=(i,e)=>{for(var t in e||(e={}))_.call(e,t)&&S(i,t,e[t]);if(I)for(var t of I(e))$.call(e,t)&&S(i,t,e[t]);return i},E=(i,e)=>A(i,q(e));import{a9 as s,ab as g,aa as p,gc as F,w as T,r as y,gA as L,cu as H,du as R,m as D,gt as B,E as O}from"./vendor.f5642644.js";import{t as z}from"./BitmapContainer.5ebbd2f1.js";import{l as N,u as Q}from"./LayerView.6e406b70.js";import{t as W,i as k}from"./BaseGraphicContainer.d8501c0a.js";import{I as K}from"./Utils.cc4850d4.js";import{S as J}from"./ExportStrategy.c3ef20bc.js";import{c as X}from"./ExportImageParameters.da713bb2.js";import{s as Y,a as Z}from"./drapedUtils.31b2576a.js";import{t as ee,d as te}from"./popupUtils.25af489d.js";import{i as ie}from"./RefreshableLayerView.0b1a5166.js";import"./WGLContainer.96b23cd9.js";import"./definitions.21e97413.js";import"./VertexArrayObject.e0a1a120.js";import"./Texture.36d56722.js";import"./ShaderCompiler.42257610.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.4d0549e4.js";import"./pixelUtils.62a09b6b.js";import"./Container.46e88f89.js";import"./earcut.f20dd8d8.js";import"./CIMSymbolHelper.e6d71723.js";import"./BidiEngine.aae60613.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.0d3c0291.js";import"./json.2d0d6862.js";import"./FeatureContainer.ea98f157.js";import"./TileContainer.03ef91ca.js";import"./visualVariablesUtils.fd6dc537.js";import"./visualVariablesUtils.7662df5b.js";import"./Matcher.19eb3b6e.js";import"./tileUtils.c954798b.js";import"./TileClipper.9ec40b87.js";import"./cimSymbolUtils.a172be06.js";import"./quantizationUtils.0f09cc76.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.24d1146f.js";import"./MD5.f9440c6b.js";import"./util.a76d11a6.js";import"./ComputedAttributeStorage.cf3eba07.js";import"./FeatureSetReader.8549f04d.js";import"./centroid.b7b6726a.js";import"./vec3f32.9cc42d31.js";import"./Bitmap.57e5bb68.js";import"./sublayerUtils.5227ee88.js";let f=class extends W{renderChildren(i){if(i.drawPhase!==K.HIGHLIGHT||(this.attributeView.bindTextures(i.context),!this.children.some(a=>a.hasData)))return;super.renderChildren(i);const{painter:e}=i,t=e.effects.highlight;t.bind(i),i.context.setColorMask(!0,!0,!0,!0),i.context.clear(16384),this._renderChildren(i,t.defines.concat(["highlightAll"])),t.draw(i),t.unbind()}};f=s([g("esri.views.2d.layers.support.HighlightGraphicContainer")],f);const re=f,ae=i=>{let e=class extends i{initialize(){this.exportImageParameters=new X({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var t;return(t=this.exportImageParameters)==null||t.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(t,a){const{layer:l}=this;if(!t)return Promise.reject(new T("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:l}));const h=this.get("view.scale"),b=[],j=async r=>{const n=r.minScale===0||h<=r.minScale,o=r.maxScale===0||h>=r.maxScale;if(r.visible&&n&&o){if(r.sublayers)r.sublayers.forEach(j);else if(r.popupEnabled){const d=te(r,E(u({},a),{defaultPopupTemplateEnabled:!1}));y(d)&&b.unshift({sublayer:r,popupTemplate:d})}}},P=l.sublayers.toArray().reverse().map(j);await Promise.all(P);const V=b.map(async({sublayer:r,popupTemplate:n})=>{await r.load().catch(()=>{});const o=r.createQuery(),d=y(a)?a.event:null,v=Y({renderer:r.renderer,event:d}),w=this.createFetchPopupFeaturesQueryGeometry(t,v);if(o.geometry=w,o.outFields=await ee(r,n),this.layer.type==="map-image"&&"floors"in this.view){var x,C;const G=(x=this.view)==null||(C=x.floors)==null?void 0:C.clone(),c=L(G,r);y(c)&&(o.where=o.where?`(${o.where}) AND (${c})`:c)}const U=await this._loadArcadeModules(n);return U&&U.arcadeUtils.hasGeometryOperations(n)||(o.maxAllowableOffset=w.width/v),(await r.queryFeatures(o)).features});return(await H(V)).reduce((r,n)=>n.value?[...r,...n.value]:r,[]).filter(r=>r!=null)}canResume(){var t;return!!super.canResume()&&((t=this.timeExtent)==null||!t.isEmpty)}_loadArcadeModules(t){if(t.get("expressionInfos.length")||Array.isArray(t.content)&&t.content.some(a=>a.type==="expression"))return R()}};return s([p()],e.prototype,"exportImageParameters",void 0),s([p({readOnly:!0})],e.prototype,"exportImageVersion",null),s([p()],e.prototype,"layer",void 0),s([p()],e.prototype,"suspended",void 0),s([p(F)],e.prototype,"timeExtent",void 0),e=s([g("esri.views.layers.MapImageLayerView")],e),e},se=D.getLogger("esri.views.2d.layers.MapImageLayerView2D");let m=class extends ae(ie(N(Q))){constructor(){super(...arguments),this._highlightGraphics=new B}update(i){this.strategy.update(i).catch(e=>{O(e)||se.error(e)})}attach(){const{imageMaxWidth:i,imageMaxHeight:e,version:t}=this.layer,a=t>=10.3,l=t>=10;this._bitmapContainer=new z,this.container.addChild(this._bitmapContainer);const h=new k({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new re(this.view.featuresTilingScheme)});this.container.addChild(h.container),this.strategy=new J({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:i,imageMaxHeight:e,imageRotationSupported:a,imageNormalizationSupported:l,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",()=>this.requestUpdate()),"exportImageVersion"),this.handles.add(this.watch("view.floors",()=>this.requestUpdate()),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(i,e){return this._highlightGraphics.add(i),{remove:()=>{this._highlightGraphics.remove(i)}}}createFetchPopupFeaturesQueryGeometry(i,e){return Z(i,e,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(i,e,t,a){return this.layer.fetchImage(i,e,t,u({timeExtent:this.timeExtent,floors:this.view.floors},a))}};s([p()],m.prototype,"strategy",void 0),s([p()],m.prototype,"updating",void 0),m=s([g("esri.views.2d.layers.MapImageLayerView2D")],m);const Ye=m;export{Ye as default};
