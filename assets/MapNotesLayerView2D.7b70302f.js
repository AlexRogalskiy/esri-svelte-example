import{r as p,cI as u,cw as f,W as n,g7 as g,q as w,a9 as j,ab as y}from"./vendor.f5642644.js";import{l as b,u as V}from"./LayerView.6e406b70.js";import{i as l}from"./GraphicContainer.fc280989.js";import{i as d}from"./BaseGraphicContainer.d8501c0a.js";import"./Container.46e88f89.js";import"./Utils.cc4850d4.js";import"./Texture.36d56722.js";import"./CIMSymbolHelper.e6d71723.js";import"./BidiEngine.aae60613.js";import"./definitions.21e97413.js";import"./GeometryUtils.d4e26b77.js";import"./projectionSupport.0d3c0291.js";import"./json.2d0d6862.js";import"./VertexArrayObject.e0a1a120.js";import"./FeatureContainer.ea98f157.js";import"./TileContainer.03ef91ca.js";import"./WGLContainer.96b23cd9.js";import"./ShaderCompiler.42257610.js";import"./config.2a39d8a4.js";import"./GeometryUtils.ea8c8742.js";import"./MaterialKey.4d0549e4.js";import"./pixelUtils.62a09b6b.js";import"./earcut.f20dd8d8.js";import"./visualVariablesUtils.fd6dc537.js";import"./visualVariablesUtils.7662df5b.js";import"./Matcher.19eb3b6e.js";import"./tileUtils.c954798b.js";import"./TileClipper.9ec40b87.js";import"./cimSymbolUtils.a172be06.js";import"./quantizationUtils.0f09cc76.js";import"./devEnvironmentUtils.444b8fd1.js";import"./schemaUtils.24d1146f.js";import"./MD5.f9440c6b.js";import"./util.a76d11a6.js";import"./ComputedAttributeStorage.cf3eba07.js";import"./FeatureSetReader.8549f04d.js";import"./centroid.b7b6726a.js";import"./vec3f32.9cc42d31.js";const m="sublayers",c="layerView",C=Object.freeze({remove(){},pause(){},resume(){}});let h=class extends b(V){async fetchPopupFeatures(e){return Array.from(this.graphicsViews(),t=>t.hitTest(e).filter(i=>!!i.popupTemplate)).flat()}*graphicsViews(){p(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():p(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(e,t){const i=Array.from(this.graphicsViews(),async r=>{const a=await r.hitTest(e);if(p(this._graphicsViewsFeatureCollectionMap)){const s=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of a)!o.popupTemplate&&s.popupTemplate&&(o.popupTemplate=s.popupTemplate)}return a});return(await Promise.all(i)).flat()}highlight(e){let t;if(typeof e=="number"?t=[e]:e instanceof u?t=[e.uid]:Array.isArray(e)&&e.length>0?t=typeof e[0]=="number"?e:e.map(i=>i&&i.uid):f.isCollection(e)&&(t=e.map(i=>i&&i.uid).toArray()),t=t.filter(i=>i!=null),!t.length)return C;for(const i of this.graphicsViews())i.addHighlight(t);return{remove:()=>{for(const i of this.graphicsViews())i.removeHighlight(t)}}}update(e){for(const t of this.graphicsViews())t.processUpdate(e)}attach(){const e=this.view,t=()=>this.requestUpdate(),i=this.layer.featureCollections;if(p(i)&&i.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of i){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:e,graphics:r.source,renderer:r.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([n(r,"visible",o=>s.container.visible=o),n(s,"updating",()=>this.notifyChange("updating"))],c)}}else p(this.layer.sublayers)&&this.handles.add(g(this.layer,"sublayers","change",()=>this._createGraphicsViews(),()=>this._createGraphicsViews(),()=>this._destroyGraphicsViews()),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews())e.viewChange()}isUpdating(){for(const e of this.graphicsViews())if(e.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(c);for(const e of this.graphicsViews())e.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),w(this.layer.sublayers))return;const e=[],t=this.view,i=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new l(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:t,graphics:r.graphics,requestUpdateCallback:i,container:a});this.handles.add([r.on("graphic-update",s.graphicUpdateHandler),n(r,"visible",o=>s.container.visible=o),n(s,"updating",()=>this.notifyChange("updating"))],c),this.container.addChild(s.container),e.push(s)}this._graphicsViews=e}};h=j([y("esri.views.2d.layers.MapNotesLayerView2D")],h);const pe=h;export{pe as default};
